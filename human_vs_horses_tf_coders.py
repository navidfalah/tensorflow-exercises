# -*- coding: utf-8 -*-
"""human vs horses tf coders.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1liv8wMnrneb6x9eab4twntrV0Ea5u27F
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

import os
import kagglehub
import shutil

# Download the dataset
try:
  path = kagglehub.dataset_download("sanikamal/horses-or-humans-dataset")

  shutil.move(path, '/content')
except:
  print("error")

from PIL import Image

img = Image.open('/content/1/horse-or-human/train/horses/horse01-0.png')
img.show()

print(f"Image format: {img.format}")
print(f"Image size: {img.size}")
print(f"Image mode: {img.mode}")

path = '/content/1/horse-or-human/'
path_train = path+'train'
path_valid = path+'validation'
### data is extracted already and its not labelled so we use the tensorflow imagedata generator
## to label the images

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
 rescale=1./255,
 rotation_range=40,
 width_shift_range=0.2,
 height_shift_range=0.2,
 shear_range=0.2,
 zoom_range=0.2,
 horizontal_flip=True,
 fill_mode='nearest'
)

train_generator = train_datagen.flow_from_directory(
 path_train,
 target_size=(300, 300),
 class_mode='binary'
)

model = tf.keras.models.Sequential([
 tf.keras.layers.Conv2D(16, (3,3), activation='relu' ,
 input_shape=(300, 300, 3)),
 tf.keras.layers.MaxPooling2D(2, 2),
 tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
 tf.keras.layers.MaxPooling2D(2,2),
 tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
 tf.keras.layers.MaxPooling2D(2,2),
 tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
 tf.keras.layers.MaxPooling2D(2,2),
 tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
 tf.keras.layers.MaxPooling2D(2,2),
 tf.keras.layers.Flatten(),
 tf.keras.layers.Dense(512, activation='relu'),
 tf.keras.layers.Dense(1, activation='sigmoid')
])

from tensorflow.keras.optimizers import RMSprop

model.compile(
    loss='binary_crossentropy',
    optimizer=RMSprop(0.001),
    metrics=['accuracy']
)

validation_datagen = ImageDataGenerator(rescale=1/255)
validation_generator = train_datagen.flow_from_directory(
 path_valid,
 target_size=(300, 300),
 class_mode='binary'
)

### adding the call back for the more than 99 percent accuracy

import tensorflow as tf

class EarlyStoppingAtAccuracy(tf.keras.callbacks.Callback):
    def __init__(self, accuracy_threshold=0.9):
        super(EarlyStoppingAtAccuracy, self).__init__()
        self.accuracy_threshold = accuracy_threshold

    def on_epoch_end(self, epoch, logs=None):
        accuracy = logs.get("accuracy")  # Tr300aining accuracy
        if accuracy is not None and accuracy >= self.accuracy_threshold:
            print(f"\nReached {self.accuracy_threshold * 100:.2f}% accuracy, stopping training!")
            self.model.stop_training = True

# Create an instance of the callback
early_stopping_callback = EarlyStoppingAtAccuracy(accuracy_threshold=0.99)

# Train the model with the callback
history = model.fit(
    train_generator,
    epochs=20,  # Set a higher number of epochs; training will stop early when accuracy reaches 99%.
    validation_data=validation_generator,
    callbacks=[early_stopping_callback]
)

### using the model for predictions

from google.colab import files
from keras.preprocessing import image

uploaded = files.upload()

for fn in uploaded.keys():
  path = "/content/"+fn
  img = image.load_img(path, target_size=(300, 300))
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  image_tensor = np.vstack([x])
  classes = model.predict(image_tensor)

  if classes[0]>0.5:
    print("human")
  else:
    print("horse")

!mkdir 'model'

model.save('model/hh.keras')

from huggingface_hub import login
login(token="")

### upload this model into the hugging face or kaggle

from tensorflow.keras.models import save_model
from huggingface_hub import HfApi, HfFolder

# Upload the model manually
from huggingface_hub import HfApi

api = HfApi()

try:
  repo_url = api.create_repo(repo_id="navidfalah/Horse_Human_classification_tf", private=False)
except:
  pass

api.upload_folder(
    folder_path="/content/model",
    repo_id="navidfalah/Horse_Human_classification_tf"
)

